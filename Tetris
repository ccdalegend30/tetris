<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            margin: 0;
            color: white;
            font-family: 'Arial', sans-serif;
        }
        canvas {
            border: 2px solid #fff;
            background-color: #000;
        }
        .info {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-left: 20px;
        }
        .score, .level, .lines {
            font-size: 24px;
            margin: 10px;
        }
        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            display: none;
            text-align: center;
        }
        .game-over h2 {
            margin-top: 0;
        }
        .btn {
            margin-top: 10px;
            cursor: pointer;
            padding: 10px 20px;
            background-color: #fff;
            color: #000;
            border: none;
            border-radius: 5px;
        }
        .share-btn {
            margin-top: 10px;
        }
    </style>
</head>
<body>
<canvas id="tetris" width="240" height="400"></canvas>
<div class="info">
    <div class="score">Score: <span id="score">0</span></div>
    <div class="level">Level: <span id="level">0</span></div>
    <div class="lines">Lines: <span id="lines">0</span></div>
</div>
<div class="game-over" id="game-over">
    <h2>Game Over!</h2>
    <button class="btn" onclick="restartGame()">Replay</button>
    <button class="btn share-btn" onclick="share()">Share</button>
</div>

<script>
    const canvas = document.getElementById('tetris');
    const context = canvas.getContext('2d');
    context.scale(20, 20);

    const arena = createMatrix(12, 20);

    const player = {
        pos: { x: 0, y: 0 },
        matrix: null,
        score: 0,
        level: 0,
        lines: 0
    };

    const colors = [
        null,
        '#FF0D72',
        '#0DC2FF',
        '#0DFF72',
        '#F538FF',
        '#FF8E0D',
        '#FFE138',
        '#3877FF',
    ];

    document.addEventListener('keydown', event => {
        if (event.keyCode === 37) {
            playerMove(-1);
        } else if (event.keyCode === 39) {
            playerMove(1);
        } else if (event.keyCode === 40) {
            playerDrop();
        } else if (event.keyCode === 38) { // Up arrow key
            playerRotate(1); // Rotate clockwise
        } else if (event.keyCode === 32) { // Space bar
            while (!collide(arena, player)) {
                player.pos.y++;
            }
            player.pos.y--;
            merge(arena, player);
            playerReset();
            arenaSweep();
            updateScore();
        } else if (event.keyCode === 81) {
            playerRotate(-1);
        }
    });

    function arenaSweep() {
        let rowCount = 1;
        outer: for (let y = arena.length - 1; y > 0; --y) {
            for (let x = 0; x < arena[y].length; ++x) {
                if (arena[y][x] === 0) {
                    continue outer;
                }
            }

            const row = arena.splice(y, 1)[0].fill(0);
            arena.unshift(row);
            ++y;

            player.score += rowCount * 10;
            player.lines++;
            rowCount *= 2;
        }
        if (player.lines >= (player.level + 1) * 10) {
            player.level++;
            dropInterval -= 50;
        }
    }

    function collide(arena, player) {
        const [m, o] = [player.matrix, player.pos];
        for (let y = 0; y < m.length; ++y) {
            for (let x = 0; x < m[y].length; ++x) {
                if (m[y][x] !== 0 &&
                    (arena[y + o.y] &&
                        arena[y + o.y][x + o.x]) !== 0) {
                    return true;
                }
            }
        }
        return false;
    }

    function createMatrix(w, h) {
        const matrix = [];
        while (h--) {
            matrix.push(new Array(w).fill(0));
        }
        return matrix;
    }

    function createPiece(type) {
        if (type === 'T') {
            return [
                [0, 0, 0],
                [1, 1, 1],
                [0, 1, 0],
            ];
        } else if (type === 'O') {
            return [
                [2, 2],
                [2, 2],
            ];
        } else if (type === 'L') {
            return [
                [0, 3, 0],
                [0, 3, 0],
                [0, 3, 3],
            ];
        } else if (type === 'J') {
            return [
                [0, 4, 0],
                [0, 4, 0],
                [4, 4, 0],
            ];
        } else if (type === 'I') {
            return [
                [0, 5, 0, 0],
                [0, 5, 0, 0],
                [0, 5, 0, 0],
                [0, 5, 0, 0],
            ];
        } else if (type === 'S') {
            return [
                [0, 6, 6],
                [6, 6, 0],
                [0, 0, 0],
            ];
        } else if (type === 'Z') {
            return [
                [7, 7, 0],
                [0, 7, 7],
                [0, 0, 0],
            ];
        }
    }



    function drawMatrix(matrix, offset) {
        matrix.forEach((row, y) => {
                            row.forEach((value, x) => {
                    if (value !== 0) {
                        context.fillStyle = colors[value];
                        context.fillRect(x + offset.x,
                            y + offset.y,
                            1, 1);
                        context.strokeStyle = '#000';
                        context.lineWidth = 0.05;
                        context.strokeRect(x + offset.x,
                            y + offset.y,
                            1, 1);
                    }
                });
            });
        }

// canvas drawing func
        function draw() {
            context.fillStyle = '#000';
            context.fillRect(0, 0, canvas.width, canvas.height);

            drawMatrix(arena, { x: 0, y: 0 });
            drawMatrix(player.matrix, player.pos);
        }

        function merge(arena, player) {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        arena[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        function rotate(matrix, dir) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [
                        matrix[x][y],
                        matrix[y][x],
                    ] = [
                        matrix[y][x],
                        matrix[x][y],
                    ];
                }
            }

            if (dir > 0) {
                matrix.forEach(row => row.reverse());
            } else {
                matrix.reverse();
            }
        }

        function playerDrop() {
            player.pos.y++;
            if (collide(arena, player)) {
                player.pos.y--;
                merge(arena, player);
                playerReset();
                arenaSweep();
                updateScore();
            }
            dropCounter = 0;
        }

        function playerMove(dir) {
            player.pos.x += dir;
            if (collide(arena, player)) {
                player.pos.x -= dir;
            }
        }

        function playerReset() {
            const pieces = 'ILJOTSZ';
            player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
            player.pos.y = 0;
            player.pos.x = (arena[0].length / 2 | 0) -
                (player.matrix[0].length / 2 | 0);
            if (collide(arena, player)) {
                showGameOver();
            }
        }

        function showGameOver() {
            const gameOverElement = document.getElementById('game-over');
            gameOverElement.style.display = 'block';
        }

        function restartGame() {
            const gameOverElement = document.getElementById('game-over');
            gameOverElement.style.display = 'none';
            arena.forEach(row => row.fill(0)); // Clear the arena first
            playerReset(); // Reset the player's position and matrix
            player.score = 0;
            player.level = 0;
            player.lines = 0;
            dropInterval = 1000;
            updateScore();
        }


        function share() {
            // Logic for sharing the game (e.g., sharing on social media)
            alert('Copy our link & share the game!');
        }

        function playerRotate(dir) {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix, dir);
            while (collide(arena, player)) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }

        let dropCounter = 0;
        let dropInterval = 1000;

        let lastTime = 0;
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;

            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }

            draw();
            requestAnimationFrame(update);
        }

        function updateScore() {
            document.getElementById('score').innerText = player.score;
            document.getElementById('level').innerText = player.level;
            document.getElementById('lines').innerText = player.lines;
        }

        playerReset();
        updateScore();
        update();
</script>
</body>
</html>
